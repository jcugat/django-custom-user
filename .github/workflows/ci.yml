# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# Also used as inspiration: https://hynek.me/articles/python-github-actions/

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Make tools pretty.
  FORCE_COLOR: "1"
  TOX_TESTENV_PASSENV: FORCE_COLOR

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        django-version: ["django32", "django40", "djangomaster"]
        database-version: ["mysql", "postgres", "sqlite"]
        # This is needed because Python 3.7 is only supported by Django 3.2
        include:
          - python-version: "3.7"
            django-version: "django32"
            database-version: "mysql"
          - python-version: "3.7"
            django-version: "django32"
            database-version: "postgres"
          - python-version: "3.7"
            django-version: "django32"
            database-version: "sqlite"
    services:
      mysql:
        image: mysql
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip poetry setuptools wheel
        poetry install -v

    - name: Compute tox environment name
      id: tox-environment-name
      shell: python
      run: |
        import sys
        python_version = "py{}{}".format(*sys.version_info[:2])
        django_version = "${{ matrix.django-version }}"
        database_version = "${{ matrix.database-version }}"
        result = "{}-{}-{}".format(python_version, django_version, database_version)
        print("::set-output name=result::{}".format(result))

    - name: Run tox for ${{ steps.tox-environment-name.outputs.result }}
      run: |
        poetry run tox -e '${{ steps.tox-environment-name.outputs.result }}'
